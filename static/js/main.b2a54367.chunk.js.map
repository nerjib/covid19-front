{"version":3,"sources":["estimatorCal.js","estimator.js","App.js","serviceWorker.js","index.js"],"names":["covid19ImpactEstimator","data","currentInfected","expectedCases","severeInfected","expectedSevereCases","severeCaseEstimate","hospitalBedByTime","severeCasesByTime","severeHospitalBed","icuRequire","ventRequire","severeICURequire","severeVentRequire","dollarloss","severeDollarloss","periodType","reportedCases","Math","trunc","timeToElapse","ceil","totalHospitalBeds","region","avgDailyIncomeInUSD","avgDailyIncomePopulation","impact","currentlyInfected","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","severeImpact","Estimator","props","estimate","name","avgAge","state","population","setState","impactResult","severeImpactResult","handleChange","e","target","value","preventDefault","className","colSpan","for","id","this","data-population","onChange","type","placeholder","style","alignItems","data-time-to-elapse","data-reported-cases","data-total-hospital-beds","data-period-type","marginLeft","class","data-goestimate","onClick","React","Component","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2a54367.chunk.js","sourcesContent":["/* eslint-disable linebreak-style */\r\nconst covid19ImpactEstimator = (data) => {\r\n    let currentInfected;\r\n    let expectedCases;\r\n    let severeInfected;\r\n    let expectedSevereCases;\r\n    let severeCaseEstimate;\r\n    let hospitalBedByTime;\r\n    let severeCasesByTime;\r\n    let severeHospitalBed;\r\n    let icuRequire;\r\n    let ventRequire;\r\n    let severeICURequire;\r\n    let severeVentRequire;\r\n    let dollarloss;\r\n    let severeDollarloss;\r\n  \r\n  \r\n    switch (data.periodType) {\r\n      case 'days':\r\n        currentInfected = data.reportedCases * 10;\r\n        expectedCases = (currentInfected * (2 ** Math.trunc(data.timeToElapse / 3)));\r\n        severeCaseEstimate = Math.trunc((15 / 100) * expectedCases);\r\n        hospitalBedByTime = Math.ceil((35 / 100) * data.totalHospitalBeds) - severeCaseEstimate;\r\n        icuRequire = Math.trunc((5 / 100) * expectedCases);\r\n        ventRequire = Math.trunc((2 / 100) * expectedCases);\r\n        dollarloss = (expectedCases * data.region.avgDailyIncomeInUSD\r\n        * data.region.avgDailyIncomePopulation) / data.timeToElapse;\r\n        severeInfected = data.reportedCases * 50;\r\n        expectedSevereCases = (severeInfected * (2 ** Math.trunc(data.timeToElapse / 3)));\r\n        severeCasesByTime = Math.trunc((15 / 100) * expectedSevereCases);\r\n        severeHospitalBed = Math.ceil((35 / 100) * data.totalHospitalBeds) - severeCasesByTime;\r\n        severeICURequire = Math.trunc((5 / 100) * expectedSevereCases);\r\n        severeVentRequire = Math.trunc((2 / 100) * expectedSevereCases);\r\n        severeDollarloss = (expectedSevereCases * data.region.avgDailyIncomeInUSD\r\n        * data.region.avgDailyIncomePopulation) / data.timeToElapse;\r\n        break;\r\n      case 'weeks':\r\n        currentInfected = data.reportedCases * 10;\r\n        expectedCases = (currentInfected * (2 ** Math.trunc((7 * data.timeToElapse) / 3)));\r\n        severeCaseEstimate = Math.trunc((15 / 100) * expectedCases);\r\n        hospitalBedByTime = Math.ceil((35 / 100) * data.totalHospitalBeds) - severeCaseEstimate;\r\n        icuRequire = Math.trunc((5 / 100) * expectedCases);\r\n        ventRequire = Math.trunc((2 / 100) * expectedCases);\r\n        dollarloss = (expectedCases * data.region.avgDailyIncomeInUSD\r\n        * data.region.avgDailyIncomePopulation) / (data.timeToElapse * 7);\r\n        severeInfected = data.reportedCases * 50;\r\n        expectedSevereCases = (severeInfected * (2 ** Math.trunc((7 * data.timeToElapse) / 3)));\r\n        severeCasesByTime = Math.trunc((15 / 100) * expectedSevereCases);\r\n        severeHospitalBed = Math.ceil((35 / 100) * data.totalHospitalBeds) - severeCasesByTime;\r\n        severeICURequire = Math.trunc((5 / 100) * expectedSevereCases);\r\n        severeVentRequire = Math.trunc((2 / 100) * expectedSevereCases);\r\n        severeDollarloss = (expectedSevereCases * data.region.avgDailyIncomeInUSD\r\n        * data.region.avgDailyIncomePopulation) / (data.timeToElapse * 7);\r\n        break;\r\n      case 'months':\r\n        currentInfected = data.reportedCases * 10;\r\n        expectedCases = (currentInfected * (2 ** Math.trunc((30 * data.timeToElapse) / 3)));\r\n        severeCaseEstimate = Math.trunc((15 / 100) * expectedCases);\r\n        hospitalBedByTime = Math.ceil((35 / 100) * data.totalHospitalBeds) - severeCaseEstimate;\r\n        icuRequire = Math.trunc((5 / 100) * expectedCases);\r\n        ventRequire = Math.trunc((2 / 100) * expectedCases);\r\n        dollarloss = (expectedCases * data.region.avgDailyIncomeInUSD\r\n        * data.region.avgDailyIncomePopulation) / (data.timeToElapse * 30);\r\n        severeInfected = data.reportedCases * 50;\r\n        expectedSevereCases = Math.trunc(severeInfected * (2 ** ((30 * data.timeToElapse) / 3)));\r\n        severeCasesByTime = Math.trunc((15 / 100) * expectedSevereCases);\r\n        severeHospitalBed = Math.ceil((35 / 100) * data.totalHospitalBeds) - severeCasesByTime;\r\n        severeICURequire = Math.trunc((5 / 100) * expectedSevereCases);\r\n        severeVentRequire = Math.trunc((2 / 100) * expectedSevereCases);\r\n        severeDollarloss = (expectedSevereCases * data.region.avgDailyIncomeInUSD\r\n        * data.region.avgDailyIncomePopulation) / (data.timeToElapse * 30);\r\n        break;\r\n      default:\r\n        currentInfected = 0;\r\n  //      expectedCases = 0;\r\n    }\r\n    return {\r\n      data,\r\n      impact: {\r\n        currentlyInfected: currentInfected,\r\n        infectionsByRequestedTime: expectedCases,\r\n        severeCasesByRequestedTime: severeCaseEstimate,\r\n        hospitalBedsByRequestedTime: hospitalBedByTime,\r\n        casesForICUByRequestedTime: icuRequire,\r\n        casesForVentilatorsByRequestedTime: ventRequire,\r\n        dollarsInFlight: Math.trunc(dollarloss)\r\n      },\r\n      severeImpact: {\r\n        currentlyInfected: severeInfected,\r\n        infectionsByRequestedTime: expectedSevereCases,\r\n        severeCasesByRequestedTime: severeCasesByTime,\r\n        hospitalBedsByRequestedTime: severeHospitalBed,\r\n        casesForICUByRequestedTime: severeICURequire,\r\n        casesForVentilatorsByRequestedTime: severeVentRequire,\r\n        dollarsInFlight: Math.trunc(severeDollarloss)\r\n      }\r\n    };\r\n  };\r\n  \r\n  export default covid19ImpactEstimator;\r\n  ","import React from 'react'\r\nimport covid19ImpactEstimator  from './estimatorCal'\r\n\r\nexport default class Estimator extends React.Component{\r\nconstructor(props){\r\n    super(props)\r\n    this.state = {\r\n        population: '',\r\n        timeToElapse: '',\r\n        reportedCases: '',\r\n        totalHospitalBeds: '',\r\n        periodType: '',\r\n        impactResult: {},\r\n        severeImpactResult: ''\r\n\r\n    }\r\n}\r\n estimate=()=>{\r\n      const data = {\r\n        region: {\r\n            name: 'Africa',\r\n            avgAge: 19.7,\r\n            avgDailyIncomeInUSD: 5,\r\n            avgDailyIncomePopulation: 0.71\r\n          },\r\n          periodType: this.state.periodType,\r\n          timeToElapse: this.state.timeToElapse,\r\n          reportedCases: this.state.reportedCases,\r\n          population: this.state.population,\r\n          totalHospitalBeds: this.state.totalHospitalBeds\r\n      }\r\n   // var impact ;\r\n    var {impact, severeImpact} = covid19ImpactEstimator(data)\r\n      this.setState ({\r\n          impactResult:  impact,\r\n          severeImpactResult: severeImpact\r\n      })\r\n }\r\n\r\n handleChange = (e) => {\r\n    const { value, name } = e.target;\r\n    e.preventDefault()\r\n     this.setState({\r\n       [name]: value\r\n    });\r\n }\r\nrender (){\r\n    return (\r\n        <div>\r\n            <div className='col-md-4'>\r\n                <table className='table table-borderless'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan='2'>\r\n                                   Data Collection\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td >\r\n                            <label className='text-left'  for='population'> Population </label>\r\n                            </td>\r\n                            <td>\r\n                                <input className='form-control' id='population' value={this.state.population} data-population='population' onChange={this.handleChange} name='population' type='text' placeholder='Population'/>    \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style={{alignItems:'left'}}>\r\n                            <label className='text-left' for='timeToElapse'>   Time to Elapse </label>\r\n                            </td>\r\n                            <td>\r\n                                <input type='text' id='timeToElapse' className='form-control' value={this.state.timeToElapse} data-time-to-elapse='timeToElapse' onChange={this.handleChange} name='timeToElapse' placeholder='Time to Elapse'/>    \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                            <label className='text-left' for='reportedCases'>   Reported Case </label>\r\n                            </td>\r\n                            <td>\r\n                                <input type='text' id='reportedCases' className='form-control' value={this.state.reportedCases} data-reported-cases='reportedCases' onChange={this.handleChange} name='reportedCases' placeholder='Reported Cases'/>    \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                            <label className='text-left' for='totalHospitalBeds'>   Total Hospital </label>\r\n                            </td>\r\n                            <td>\r\n                                <input type='text' id='totalHospitalBeds' className='form-control' value={this.state.totalHospitalBeds} data-total-hospital-beds='totalHospitalBeds' onChange={this.handleChange} name='totalHospitalBeds' placeholder='Total Hospital Beds'/>    \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                            <label className='text-left' for='periodType'>  Period Type </label>\r\n                            </td>\r\n                            <td>\r\n                                <select className='form-control' id='periodType'   data-period-type='periodType' name='periodType' onChange={this.handleChange}>\r\n                                    <option >Period Type</option>\r\n                                    <option value='days'>Days</option>\r\n                                    <option value='weeks'>Weeks</option>\r\n                                    <option value ='months'>Months</option>\r\n                                </select>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td colSpan='2'  style={{alignItems:'center', marginLeft:50}}>\r\n                            <button class='btn btn-default btn-info' data-goestimate='estimate'  onClick={this.estimate}>Estimate</button>\r\n\r\n                            </td>\r\n                        </tr>\r\n                   </tbody>\r\n                </table>\r\n            </div>\r\n                <div>\r\n                    <table className='table' style={{alignItems:'left'}}>\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Estimation Output</th>\r\n                            <th>Impact</th>\r\n                            <th>Severe Impact</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                 Currently Infected \r\n                                </td>\r\n                                <td>\r\n                                    {this.state.impactResult.currentlyInfected}\r\n                                    \r\n                                </td>\r\n                                <td>\r\n                                {this.state.severeImpactResult.currentlyInfected}\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                   Infections At \r\n                                </td>\r\n                                <td>\r\n                                {this.state.impactResult.infectionsByRequestedTime}\r\n\r\n                                </td>\r\n                                <td>\r\n                                    {this.state.severeImpactResult.infectionsByRequestedTime}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                   Severe Cases \r\n                                </td>\r\n                                <td>\r\n                                    {this.state.impactResult.severeCasesByRequestedTime}\r\n                                </td>\r\n                                <td>\r\n                                    {this.state.severeImpactResult.severeCasesByRequestedTime}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                   Hospital Beds\r\n                                </td>\r\n                                <td>\r\n                                    {this.state.impactResult.hospitalBedsByRequestedTime}\r\n                                </td>\r\n                                <td>\r\n                                    {this.state.severeImpactResult.hospitalBedsByRequestedTime}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                 Cases For ICU \r\n                                </td>\r\n                                <td>\r\n                                    {this.state.impactResult.casesForICUByRequestedTime}\r\n                                </td>\r\n                                <td>\r\n                                    {this.state.severeImpactResult.casesForICUByRequestedTime}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                 Cases For Ventilators \r\n                                </td>\r\n                                <td>\r\n                                    {this.state.impactResult.casesForVentilatorsByRequestedTime}\r\n                                </td>\r\n                                <td>\r\n                                    {this.state.severeImpactResult.casesForVentilatorsByRequestedTime}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                 Dollars In Flight \r\n                                </td>\r\n                                <td>\r\n                                    {this.state.impactResult.dollarsInFlight}\r\n                                </td>\r\n                                <td>\r\n                                    {this.state.severeImpactResult.dollarsInFlight}\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n               </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n}","import React from 'react';\r\nimport Estimator from './estimator'\r\nimport './App.css';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n//import covid19ImpactEstimator from '../../src/estimator'\r\n\r\nfunction App() {\r\n\r\n//alert(  covid19ImpactEstimator(3))\r\n  return (\r\n    <div className=\"App\">\r\n     <Switch>\r\n        <Route path=\"/\" exact component={(Estimator)} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}